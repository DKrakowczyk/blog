# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddArticleInput {
  """Add article title"""
  title: String!

  """Add article description"""
  description: String

  """Add article body"""
  body: String!

  """Add article body"""
  author: String!

  """Add is draft (true/false)"""
  isDraft: Boolean!
}

input AddCommentInput {
  """Comment body"""
  comment: String!

  """Comment author"""
  author: String!
}

input AddUserInput {
  userName: String!
  email: String!
  password: String!
  role: Role!
}

"""Article model"""
type Article {
  _id: ObjectId!

  """Article title"""
  title: String!

  """Article description"""
  description: String

  """Article body"""
  body: String!

  """Article body"""
  author: String!

  """Is draft (true/false)"""
  isDraft: Boolean!

  """Comments for current post"""
  comments: [Comment!]

  """Creation time"""
  created_at: DateTime!

  """Date of publishing"""
  published_at: DateTime
}

"""Comment model"""
type Comment {
  _id: ObjectId!

  """Comment body"""
  comment: String!

  """Comment author"""
  author: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input EditUserInput {
  _id: ObjectId!
  userName: String
  role: Role!
}

type Mutation {
  createArticle(input: AddArticleInput!): Article!
  publishArticle(_id: ObjectId!): Article!
  deleteArticle(_id: ObjectId!): Article!
  addComment(articleId: ObjectId!, input: AddCommentInput!): Comment!
  removeComment(commentId: ObjectId!, articleId: ObjectId!): Comment!
  addUser(user: AddUserInput!): User!
  editUser(user: EditUserInput!): User!
  deleteUser(userId: ObjectId!): ObjectId!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Query {
  getAllArticles: [Article!]!
  getSingleArticle(_id: ObjectId!): Article!
  getAllComments(articleId: ObjectId!): [Comment!]!
  findAllUsers: [User!]!
}

"""Available user roles"""
enum Role {
  Admin
  Maintainer
  StandardUser
}

type User {
  _id: ObjectId!
  userName: String!
  email: String
  password: String

  """User role"""
  role: Role!
}
